{
  "snippets": [
    {
      "name": "New Collection",
      "prefix": "collection",
      "body": [
        "import type { CollectionConfig } from 'payload';",
        "",
        "export const ${1:CollectionName}: CollectionConfig = {",
        "  slug: '${2:collection-slug}',",
        "  admin: {",
        "    useAsTitle: '${3:title}',",
        "    defaultColumns: ['${3:title}', 'slug', 'status', 'updatedAt'],",
        "  },",
        "  access: {",
        "    read: () => true, // Public read access",
        "  },",
        "  fields: [",
        "    {",
        "      name: '${3:title}',",
        "      type: 'text',",
        "      required: true,",
        "    },",
        "    {",
        "      name: 'slug',",
        "      type: 'text',",
        "      required: true,",
        "      unique: true,",
        "      admin: {",
        "        position: 'sidebar',",
        "        description: 'URL-friendly version of the title',",
        "      },",
        "    },",
        "    {",
        "      name: 'status',",
        "      type: 'select',",
        "      options: [",
        "        { label: 'Draft', value: 'draft' },",
        "        { label: 'Published', value: 'published' },",
        "      ],",
        "      defaultValue: 'draft',",
        "      admin: {",
        "        position: 'sidebar',",
        "      },",
        "    },",
        "  ],",
        "  hooks: {",
        "    beforeChange: [",
        "      ({ data }) => {",
        "        // Auto-generate slug from title if not provided",
        "        if (data.${3:title} && !data.slug) {",
        "          data.slug = data.${3:title}",
        "            .toLowerCase()",
        "            .replace(/[^a-z0-9]+/g, '-')",
        "            .replace(/(^-|-$)/g, '');",
        "        }",
        "      },",
        "    ],",
        "  },",
        "};"
      ],
      "description": "Create a new Payload CMS collection"
    },
    {
      "name": "New Route",
      "prefix": "route",
      "body": [
        "import type { MetaFunction } from 'react-router';",
        "import { payloadClient } from '~/lib/payloadClient';",
        "import type { ${1:CollectionName} } from '~/lib/types';",
        "",
        "export const meta: MetaFunction<typeof loader> = ({ loaderData }) => {",
        "  if (!loaderData || !(loaderData as any)?.${2:item}) {",
        "    return [",
        "      { title: 'Not Found' },",
        "      { name: 'description', content: '${1:CollectionName} not found' },",
        "    ];",
        "  }",
        "",
        "  const ${2:item} = (loaderData as any).${2:item};",
        "  return [",
        "    { title: `${${2:item}.title} - Overland Stack` },",
        "    {",
        "      name: 'description',",
        "      content: ${2:item}.excerpt || ${2:item}.seo?.description || 'Read more',",
        "    },",
        "  ];",
        "};",
        "",
        "export async function loader({ params }: { params: { slug: string } }) {",
        "  try {",
        "    const ${2:item} = await payloadClient.get${1:CollectionName}(params.slug);",
        "    return { ${2:item} };",
        "  } catch (error) {",
        "    console.error(`Error loading ${1:CollectionName.toLowerCase()}:`, error);",
        "    throw new Response('Not Found', { status: 404 });",
        "  }",
        "}",
        "",
        "export default function ${1:CollectionName}Detail({",
        "  loaderData,",
        "}: {",
        "  loaderData: { ${2:item}: ${1:CollectionName} };",
        "}) {",
        "  const { ${2:item} } = loaderData;",
        "",
        "  return (",
        "    <div className='max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>",
        "      <article className='prose prose-lg max-w-none'>",
        "        <h1 className='text-4xl font-bold text-gray-900 mb-4'>",
        "          {${2:item}.title}",
        "        </h1>",
        "",
        "        {${2:item}.excerpt && (",
        "          <p className='text-xl text-gray-600 mb-8'>{${2:item}.excerpt}</p>",
        "        )}",
        "",
        "        <div className='prose prose-lg max-w-none'>",
        "          {/* Content rendering here */}",
        "        </div>",
        "      </article>",
        "    </div>",
        "  );",
        "}"
      ],
      "description": "Create a new React Router route with loader and meta"
    },
    {
      "name": "New UI Component",
      "prefix": "component",
      "body": [
        "import React from 'react';",
        "",
        "export interface ${1:ComponentName}Props {",
        "  ${2:prop}: ${3:string};",
        "  className?: string;",
        "}",
        "",
        "export function ${1:ComponentName}({ ${2:prop}, className = '' }: ${1:ComponentName}Props) {",
        "  return (",
        "    <div className={`${4:base-styles} ${className}`}>",
        "      {${2:prop}}",
        "    </div>",
        "  );",
        "}",
        "",
        "export default ${1:ComponentName};"
      ],
      "description": "Create a new UI component with TypeScript"
    },
    {
      "name": "New API Route",
      "prefix": "api-route",
      "body": [
        "import type { ActionFunctionArgs, LoaderFunctionArgs } from 'react-router';",
        "import { json } from 'react-router';",
        "import { payloadClient } from '~/lib/payloadClient';",
        "",
        "export async function loader({ request }: LoaderFunctionArgs) {",
        "  try {",
        "    const url = new URL(request.url);",
        "    const ${1:param} = url.searchParams.get('${1:param}');",
        "",
        "    if (!${1:param}) {",
        "      return json({ error: 'Missing required parameter' }, { status: 400 });",
        "    }",
        "",
        "    const ${2:data} = await payloadClient.${3:method}(${1:param});",
        "    return json({ ${2:data} });",
        "  } catch (error) {",
        "    console.error('API Error:', error);",
        "    return json({ error: 'Internal server error' }, { status: 500 });",
        "  }",
        "}",
        "",
        "export async function action({ request }: ActionFunctionArgs) {",
        "  try {",
        "    const formData = await request.formData();",
        "    const ${4:field} = formData.get('${4:field}') as string;",
        "",
        "    if (!${4:field}) {",
        "      return json({ error: 'Missing required field' }, { status: 400 });",
        "    }",
        "",
        "    // Process the action",
        "    const result = await ${5:processAction}(${4:field});",
        "    return json({ success: true, result });",
        "  } catch (error) {",
        "    console.error('Action Error:', error);",
        "    return json({ error: 'Internal server error' }, { status: 500 });",
        "  }",
        "}"
      ],
      "description": "Create a new API route with loader and action"
    },
    {
      "name": "New Test File",
      "prefix": "test",
      "body": [
        "import { describe, it, expect, vi, beforeEach } from 'vitest';",
        "import { render, screen } from '@testing-library/react';",
        "import { ${1:ComponentName} } from './${1:ComponentName}';",
        "",
        "describe('${1:ComponentName}', () => {",
        "  beforeEach(() => {",
        "    vi.clearAllMocks();",
        "  });",
        "",
        "  it('should render correctly', () => {",
        "    render(<${1:ComponentName} ${2:prop}='${3:test-value}' />);",
        "    ",
        "    expect(screen.getByText('${3:test-value}')).toBeInTheDocument();",
        "  });",
        "",
        "  it('should handle ${4:scenario}', () => {",
        "    // Test implementation",
        "    expect(true).toBe(true);",
        "  });",
        "});"
      ],
      "description": "Create a new test file with Vitest"
    },
    {
      "name": "New E2E Test",
      "prefix": "e2e-test",
      "body": [
        "import { test, expect } from '@playwright/test';",
        "",
        "test.describe('${1:FeatureName}', () => {",
        "  test('should ${2:test-description}', async ({ page }) => {",
        "    await page.goto('${3:/path}');",
        "",
        "    // Wait for page to load",
        "    await page.waitForLoadState('networkidle');",
        "",
        "    // Test implementation",
        "    await expect(page.locator('${4:selector}')).toBeVisible();",
        "  });",
        "",
        "  test('should handle ${5:scenario}', async ({ page }) => {",
        "    await page.goto('${3:/path}');",
        "",
        "    // Test implementation",
        "    await expect(page.locator('${6:selector}')).toHaveText('${7:expected-text}');",
        "  });",
        "});"
      ],
      "description": "Create a new E2E test with Playwright"
    },
    {
      "name": "New Field Type",
      "prefix": "field-type",
      "body": [
        "import type { Field } from 'payload';",
        "",
        "export const ${1:FieldName}: Field = {",
        "  name: '${2:field-name}',",
        "  type: '${3:field-type}',",
        "  ${4:required: true,}",
        "  admin: {",
        "    description: '${5:Field description}',",
        "    ${6:position: 'sidebar',}",
        "  },",
        "  ${7:// Additional field configuration}",
        "};"
      ],
      "description": "Create a new custom field type for Payload CMS"
    },
    {
      "name": "New Hook",
      "prefix": "hook",
      "body": [
        "import { use${1:HookName} } from '${2:react-hookz/web}';",
        "",
        "export function use${3:CustomHook}(${4:param}: ${5:string}) {",
        "  const ${6:state} = use${1:HookName}(${4:param});",
        "",
        "  return {",
        "    ${6:state},",
        "    ${7:// Additional return values}",
        "  };",
        "}"
      ],
      "description": "Create a new custom React hook"
    },
    {
      "name": "New Utility Function",
      "prefix": "util",
      "body": [
        "import { ${1:imports} } from '${2:source}';",
        "",
        "/**",
        " * ${3:Function description}",
        " * @param ${4:param} - ${5:Parameter description}",
        " * @returns ${6:Return description}",
        " */",
        "export function ${7:functionName}(${4:param}: ${8:type}): ${9:returnType} {",
        "  ${10:// Implementation}",
        "  return ${11:result};",
        "}"
      ],
      "description": "Create a new utility function with JSDoc"
    },
    {
      "name": "New Global Setting",
      "prefix": "global",
      "body": [
        "import type { GlobalConfig } from 'payload';",
        "",
        "export const ${1:GlobalName}: GlobalConfig = {",
        "  slug: '${2:global-slug}',",
        "  admin: {",
        "    group: '${3:Settings}',",
        "  },",
        "  access: {",
        "    read: () => true,",
        "    update: ({ req: { user } }) => Boolean(user),",
        "  },",
        "  fields: [",
        "    {",
        "      name: '${4:fieldName}',",
        "      type: '${5:text}',",
        "      ${6:required: true,}",
        "      admin: {",
        "        description: '${7:Field description}',",
        "      },",
        "    },",
        "  ],",
        "};"
      ],
      "description": "Create a new global setting for Payload CMS"
    }
  ]
}
