services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: overland-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: overland
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Payload CMS
  cms:
    build:
      context: .
      dockerfile: apps/cms/Dockerfile
    container_name: overland-cms
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URI: postgresql://postgres:password@postgres:5432/overland
      PAYLOAD_SECRET: ${PAYLOAD_SECRET:-your-secret-key-here}
      PAYLOAD_PUBLIC_SERVER_URL: ${PAYLOAD_PUBLIC_SERVER_URL:-http://localhost:3001}
      PAYLOAD_PUBLIC_CMS_URL: ${PAYLOAD_PUBLIC_CMS_URL:-http://localhost:3001/admin}
      CMS_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - cms_uploads:/app/apps/cms/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/admin"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Application
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: overland-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      WEB_PORT: 3000
      PAYLOAD_PUBLIC_SERVER_URL: ${PAYLOAD_PUBLIC_SERVER_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      cms:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  cms_uploads:
    driver: local

networks:
  default:
    name: overland-network
